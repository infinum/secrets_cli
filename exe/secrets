#!/usr/bin/env ruby

# $LOAD_PATH << 'lib'
require 'rubygems'
require 'commander/import'
require 'secrets_cli'

require 'pry' if ENV['SECRETS_ENV'] == 'dev'

program :version, SecretsCli::VERSION
program :description, 'CLI for vault'

global_option '-V', '--verbose', 'Verbose'

command :init do |c|
  c.syntax = 'secrets init [options]'
  c.summary = 'Use to initialize project, create .secrets file'
  c.option '-f', '--secrets_file STRING', String, 'Define secrets file'
  c.option '-k', '--secrets_storage_key STRING', String, 'Define secrets storage_key'
  c.option '-a', '--vault_addr STRING', String, 'Vault url'
  c.option '-b', '--vault_backend STRING', String, 'Vault backend'
  c.action do |_args, options|
    SecretsCli::Init.new(options).call
  end
end

command :policies do |c|
  c.syntax = 'secrets policies'
  c.summary = 'Check what policies your auth has'
  c.action do |_args, options|
    SecretsCli::Vault::Policies.new(options).call(verbose: true)
  end
end

command :pull do |c|
  c.syntax = 'secrets pull [options]'
  c.summary = 'Use to read from vault server to secrets file'
  c.option '-y', '--ci_mode', 'CI mode (disables prompts and outputs)'
  c.option '-e', '--environment STRING', String, 'Set environment, default: development'
  c.option '-f', '--secrets_file STRING', String, 'Override secrets_file'
  c.option '-k', '--secrets_storage_key STRING', String, 'Override secrets_storage_key'
  c.option '-d', '--secrets_dir STRING', String, 'Override secrets_dir, default: "."'
  c.action do |_args, options|
    SecretsCli::Vault::Pull.new(options).call(verbose: options.verbose)
  end
end

command :push do |c|
  c.syntax = 'secrets push [options]'
  c.summary = 'Use to write to vault server from secrets file'
  c.option '-y', '--ci_mode', 'CI mode (disables prompts and outputs)'
  c.option '-e', '--environment STRING', String, 'Set environment, default: development'
  c.option '-f', '--secrets_file STRING', String, 'Override secrets_file'
  c.option '-k', '--secrets_storage_key STRING', String, 'Override secrets_storage_key'
  c.action do |_args, options|
    SecretsCli::Vault::Push.new(options).call(verbose: options.verbose)
  end
end

command :read do |c|
  c.syntax = 'secrets read [options]'
  c.summary = 'Use to only read from vault server without writing to secrets file'
  c.option '-e', '--environment STRING', String, 'Set environment, default: development'
  c.option '-k', '--secrets_storage_key STRING', String, 'Override secrets_storage_key'
  c.option '-m', '--mount STRING', String, 'Set mount point (used in kv backend)'
  c.option '-n', '--kv_version STRING', Integer, 'Version of secret (used in kv backend)'
  c.action do |_args, options|
    SecretsCli::Vault::Read.new(options).call(verbose: !options.ci_mode)
  end
end

command :edit do |c|
  c.syntax = 'secrets edit [options]'
  c.summary = 'Use to edit secrets directly in your favorite editor'
  c.option '-e', '--environment STRING', String, 'Set environment, default: development'
  c.option '-k', '--secrets_storage_key STRING', String, 'Override secrets_storage_key'
  c.action do |_args, options|
    SecretsCli::Vault::Edit.new(options).call
  end
end

command :list do |c|
  c.syntax = 'secrets list [options]'
  c.summary = 'Use to list all environemnts'
  c.option '-k', '--secrets_storage_key STRING', String, 'Override secrets_storage_key'
  c.action do |_args, options|
    SecretsCli::Vault::List.new(options).call(verbose: true)
  end
end
